* {
    margin: 0;
    padding: 0;
}

p {
    background-color: darkgray;
    font-weight: bolder;
    font-size: larger;
}

.parent {
    margin: 12px;
    padding: 12px;
    border: 2px solid blue;
    position: relative; 
    /* position: absolute; */

}

.box {
    margin: 3px;
    padding: 3px;
    width: 30vw;
    height: 100px;
    border: solid rgb(10, 76, 197) 2px;
}

.box1 {
    height: 100px;
    background-color: red;
    /* position: relative;
    top:100px;
    left: 130px;
    bottom: 40%;  */
    position: sticky;
    top: 0px;
    left: 0px;
}

.box2 {
    background-color: blue;
    /* position: relative; 
    top: 34px;
    left: 21px;
    bottom: 23px; */
}

.box3 {
    background-color: green;
    /* position: fixed;
    top: 0px;
    right: 0vw; */
}

.box4 {
    background-color: yellow;
}

.cards {
    border: 2px solid darkblue;
    /* will not allow to overflow */
    display: flow-root;
}

.cards>img {
    /* float: left; */
    float: right;
}

.card {
    border: 2px solid red;
}

/* clear use to states that 'no one is float on my right/left/...'  */
/* card 2 is third child */
.card:nth-child(3) {
    /* clear:right; */
}

.flexParent{
    height: 300px;
    width: 300px;
    margin: 10px;
    border: 2px solid blue;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    align-content: center; 
    gap: 10px 2px;
}
.flexChild{
    height: 32px;
    width: 32px;
    background: chocolate;
    border: 2px solid black;
    margin: 2px;
}
.order-1{
    order:1;
}
.order-2{
    order:2;
}
.order-3{
    order:3;
}
.order-100{
    order:100;
}
.gridParent{
    margin: 10px;
    border: 2px solid blue; 
    display: grid;
    height: 300px;
    /* width: 700px; */
    width: 80vw;
    grid-template-columns: auto auto auto;
    grid-template-rows: auto auto 80px; 
    /* grid-template-columns: 1fr 1fr 1fr;
    grid-template-areas: "nav nav nav"
                        "side article article"
                        "foot foot foot"; */

    /* ----Explicit vs implicit grid: https://css-tricks.com/difference-explicit-implicit-grids/ */
    /* if grid size is 2x2 and we add 5th element. if will be auto generate new row and add that element with default sizing */
    grid-auto-flow: column;     /* now new columns are generate for extra elements */
    grid-auto-rows: 50px;
    /* We can set the implicit grid track sizes using the grid-auto-rows and grid-auto-columns properties. */


    /* repeat() function : 
    grid-template-columns: 150px 150px 150px 150px 150px;
    can be rewritten as:   grid-template-columns: repeat(5, 150px);
    
    minmax() function : 
    .grid-container {
        grid-template-rows: repeat(2, 1fr);
        grid-template-columns: repeat(5, minmax(150px, 200px));
    }
    --> With our grid-template-columns set with minmax() values, each grid item’s width will grow and shrink with the grid container as it resizes horizontally. However, as the grid shrinks, the column tracks will stop shrinking at 150px, and as the grid grows, they will stop growing at 200px


    clamp() function : clamp(minimum-size, ideal-size, maximum-size)
    --> Since clamp()’s purpose is to create a flexibly sized track with constraints, we want to use a dynamic value for the “ideal size” argument, and typically a static size for the minimum and maximum size, although it is possible to use a dynamic value here too.


    auto-fit and auto-fill
    use case: You want to give your grid a number of columns that is flexible based on the size of the grid. For example, if our grid is only 200px wide, we may only want one column. If it’s 400px wide, we may want two, and so on. Thankfully, auto-fit and auto-fill are here to save the day!
    .example {
        display: grid;
        width: 1000px;
        grid-template-columns: repeat(auto-fit, 200px);
    }
    The real magic of auto-fit and auto-fill comes when we incorporate minmax() into the equation.
    example -> grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));

    for auto-fill checkout examples  -> https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-advanced-grid-properties#what-about-auto-fill
    Using auto-fill, the grid items will snap back down to their min size once the space becomes available to add another grid item, even if there isn’t one to be rendered.When the grid is expanded to a size where another grid item could fit, but there aren’t any left, auto-fit will keep the grid items at their max size.

    */



}
.gridChild{
    /* height: 32px;
    width: 32px; */
    background: blueviolet;
    border: 2px solid black;
}
.g1{
    grid-row: 1/3;
    grid-column: 1/2; 
    /* grid-area: article; */
}
.g2{
    /* grid-area: side; */
}
.g3{
    /* grid-area: foot; */
}
.g4{
    /* grid-area: nav; */
    grid-row: 3/4;
    grid-column: -4/-2; 
}
.g5{
    /* grid-area: foot; */
}